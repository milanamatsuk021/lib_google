# Описание приложения "Моя Книжная Полка"

Это веб-приложение для ведения личной книжной библиотеки. Приложение построено на современных принципах frontend-разработки с четким разделением ответственности.

## Архитектура проекта

Проект имеет модульную структуру, где каждый файл выполняет свою задачу:

- `index.html`: Главный HTML-файл, куда монтируется React-приложение.
- `index.tsx`: Точка входа, которая рендерит корневой компонент `<App />`.
- `App.tsx`: Главный компонент, который управляет состоянием UI, навигацией и отображением данных.
- `services/`: Папка для сервисов, отвечающих за внешние взаимодействия.
  - `googleBooksService.ts`: Сервис для поиска книг через Google Books API.
  - `geminiService.ts`: Сервис для получения книжных рекомендаций от Gemini AI.
  - `dbService.ts`: **Сервис для работы с данными.** Он инкапсулирует всю логику взаимодействия с **IndexedDB**, предоставляя простые методы (`getAllBooks`, `addBook` и т.д.) для остальной части приложения.
- `components/`: Папка с переиспользуемыми React-компонентами (карточки книг, модальные окна, навигация).
  - `ui/`: Подпапка для базовых, универсальных UI-элементов, таких как `Select.tsx`.
- `types.ts`: Файл с определениями всех TypeScript-типов и интерфейсов.
- `initial-books.json`: Статический JSON-файл, который содержит "стартовый" набор книг для первого заполнения базы данных.

## Слой данных (Data Layer)

Приложение использует **IndexedDB** для персистентного хранения данных на стороне клиента. Это мощная браузерная база данных, идеально подходящая для приложений, которые должны работать офлайн или управлять большими объемами структурированной информации.

- **Инициализация:** При первом запуске `dbService` создает базу данных и, если она пуста, заполняет ее данными из `initial-books.json`.
- **Операции (CRUD):** Вся работа с базой данных (создание, чтение, обновление, удаление книг) выполняется асинхронно через методы `dbService`.
- **Синхронизация с UI:** Компонент `App` загружает книги из `dbService` при запуске. После каждой операции, изменяющей данные (например, добавление книги), `App` сначала отправляет запрос в `dbService`, а после его успешного выполнения обновляет свое локальное состояние, чтобы пользователь немедленно увидел изменения в интерфейсе.

Эта архитектура обеспечивает надежность, производительность и хорошую организацию кода, что делает его легким для поддержки и дальнейшего развития.
