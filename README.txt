# Описание приложения "Моя Книжная Полка"

Это простое веб-приложение для ведения личной книжной библиотеки. Вся логика и интерфейс собраны в одном файле `App.tsx` для максимальной простоты и наглядности, что характерно для проектов начинающих разработчиков.

## Структура проекта

Проект имеет минималистичную структуру:

- `index.html`: Главный HTML-файл, куда монтируется React-приложение.
- `index.tsx`: Точка входа, которая находит `div#root` в HTML и рендерит в него компонент `App`.
- `App.tsx`: **Основной и единственный файл**, содержащий всю логику, все компоненты, типы данных и стили.
- `README.txt`: Этот файл с описанием.

## Архитектура файла `App.tsx`

Файл `App.tsx` логически разделен на несколько секций:

### 1. ТИПЫ ДАННЫХ
Здесь определены все структуры данных, используемые в приложении.

- `BookCategory`: Enum (перечисление) для статусов чтения (`Читаю`, `Прочитано`, `Хочу прочитать`).
- `PhysicalStatus`: Enum для физического статуса книги (`В коллекции`, `Хочу купить`).
- `Book`: Основной интерфейс (тип) для объекта книги, хранящейся в библиотеке пользователя.
- `RawBook`: Тип для книги, получаемой из поискового API. Отличается тем, что не имеет полей `category` и `physicalStatus`.
- `View`: Enum для управления навигацией между экранами (`Библиотека`, `Поиск`, `Желания`, `Коллекция`).

### 2. КОМПОНЕНТЫ ИКОНОК
Набор простых React-компонентов, каждый из которых возвращает SVG-разметку для иконок, используемых в интерфейсе.

### 3. ВСПОМОГАТЕЛЬНЫЕ КОМПОНЕНТЫ
Это небольшие, переиспользуемые части интерфейса, вынесенные в отдельные функции для читаемости.

- `Spinner`: Анимация загрузки.
- `Header`: Шапка приложения, отображающая заголовок текущего экрана.
- `BottomNav`: Нижняя панель навигации для переключения между экранами (`View`).
- `BookCard`: Карточка для отображения книги в списках (в библиотеке, коллекции, списке желаний).
- `ManualAddBookModal`: Модальное окно с формой для ручного добавления книги.
- `SearchResultCard`: Карточка для отображения книги в результатах поиска.
- `AddBookModal`: Модальное окно, которое появляется после выбора книги в поиске. Позволяет задать категорию и физический статус перед добавлением в библиотеку.
- `BookDetailsModal`: Модальное окно для просмотра и редактирования деталей уже добавленной книги.

### 4. СЕРВИС ПОИСКА
- `searchBooks(query, searchInAuthor)`: Асинхронная функция, которая выполняет сетевой запрос к `Google Books API`. Она принимает поисковый запрос и флаг "искать только в авторах", а возвращает массив найденных книг в формате `RawBook[]`. Также обрабатывает ошибки сети или API.

### 5. ГЛАВНЫЙ КОМПОНЕНТ `App`
Это сердце приложения.

#### Состояния (States)
В компоненте используются хуки `useState` для управления состоянием:
- `activeView`: Хранит текущий активный экран (из `View`).
- `books`: Главное состояние - массив всех книг пользователя. Оно инициализируется данными из `localStorage`.
- `useEffect` для `books`: Этот хук следит за изменениями в массиве `books` и автоматически сохраняет актуальную версию в `localStorage` браузера. Это обеспечивает персистентность данных (книги не пропадают после перезагрузки страницы).
- `searchQuery`, `searchResults`, `isLoading` и др.: Набор состояний для управления поиском (текст запроса, результаты, статус загрузки, ошибки).
- `modalBook`, `detailsBook` и др.: Состояния для управления отображением модальных окон.

#### Функции-обработчики
- `handleSearch`: Вызывается при отправке формы поиска. Запускает `searchBooks` и обновляет состояния `searchResults`, `isLoading`, `searchError`.
- `handleResetSearch`: Сбрасывает состояние поиска к исходному.
- `addBookToLibrary`: Добавляет новую книгу в массив `books`.
- `updateBookInLibrary`: Находит книгу в массиве по `id` и обновляет ее данные.
- `deleteBookFromLibrary`: Удаляет книгу из массива `books` по `id`.
- `handleManualAdd`: Обрабатывает данные из формы ручного добавления.

#### Логика отображения (JSX)
- `headerTitle`: Объект-словарь для определения заголовка в зависимости от `activeView`.
- `renderView()`: Ключевая функция, которая использует `switch` (или `if/else`) для определения, какой набор компонентов рендерить в зависимости от `activeView`. Именно она отвечает за переключение экранов.
- `return (...)`: Основная JSX-разметка компонента `App`, которая собирает все части вместе: `Header`, результат `renderView()`, `BottomNav` и условный рендеринг всех модальных окон.
